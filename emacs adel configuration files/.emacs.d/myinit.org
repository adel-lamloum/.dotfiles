#+TITLE: AD'S Personal Emacs Config
#+AUTHOR: Adel Lamloum
#+STARTUP: fold

* customize emacs screen

#+BEGIN_SRC emacs-lisp

      (scroll-bar-mode -1) ; disable visible scrollbar
      (tool-bar-mode -1) ; disable tool bar
      (tooltip-mode -1) ; disable tooltips
      (set-fringe-mode 10) ; give some breathing room
      (menu-bar-mode -1) ;disable menu bar
    (setq inhibit-startup-message t)

      ;; setup visible bell
      (setq visible-bell t)

     (set-face-attribute 'default nil :font "JetBrains Mono NL" :height 105) ;set font

      ;; set line numbers
      (add-hook 'org-mode-hook #'display-line-numbers-mode)

#+END_SRC

* install packages
** install emacs Dashboard
#+begin_src emacs-lisp
  (use-package dashboard
  :ensure t
  :init
  ;;set dashboard banner title
  (setq dashboard-banner-logo-title "This Adel`s Lamloum Emacs")
  (setq dashboard-set-file-icons t) ;show files icons
  (setq dasshboard-set-heading-icons t)
  ;; set your image in emacs startup
  (setq dashboard-startup-banner "/home/adel/.emacs.d/me.png")
  ;; to set items you want to show in start up .
  (setq dashboard-items '((recents   . 5)
			(bookmarks . 5)
			(projects  . 5)
			(agenda    . 5)))
  :config
  (dashboard-setup-startup-hook))
#+end_src
** Vim Bindings evil-mode

#+BEGIN_SRC emacs-lisp
  (use-package evil
    :demand t
    :bind (("<escape>" . keyboard-escape-quit))
    :init
    ;; allows for using cgn
    ;; (setq evil-search-module 'evil-search)
    (setq evil-want-keybinding nil)
    ;; no vim insert bindings
    (setq evil-undo-system 'undo-fu)
    :config

    (evil-mode 1))

  ;; evil-tutor
  (use-package evil-tutor)

#+END_SRC
** MINIBUFFER ESCAPE
By default, Emacs requires you to hit ESC three times to escape quit the minibuffer.  

#+begin_src emacs-lisp
(global-set-key [escape] 'keyboard-escape-quit)
#+end_src
** IVY (COUNSEL)
+ Ivy, a generic completion mechanism for Emacs.
+ Counsel, a collection of Ivy-enhanced versions of common Emacs commands.
+ Ivy-rich allows us to add descriptions alongside the commands in M-x.

#+begin_src emacs-lisp
(use-package counsel
  :after ivy
  :diminish
  :config 
    (counsel-mode)
    (setq ivy-initial-inputs-alist nil)) ;; removes starting ^ regex in M-x

(use-package ivy
  :bind
  ;; ivy-resumes the last Ivy-based completion.
  (("C-c C-r" . ivy-resume)
   ("C-x B" . ivy-switch-buffer-other-window))
  :diminish
  :custom
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "(%d/%d) ")
  (setq enable-recursive-minibuffers t)
  :config
  (ivy-mode))

(use-package all-the-icons-ivy-rich
  :ensure t
  :init (all-the-icons-ivy-rich-mode 1))

(use-package ivy-rich
  :after ivy
  :ensure t
  :init (ivy-rich-mode 1) ;; this gets us descriptions in M-x.
  :custom
  (ivy-virtual-abbreviate 'full
   ivy-rich-switch-buffer-align-virtual-buffer t
   ivy-rich-path-style 'abbrev)
  :config
  (ivy-set-display-transformer 'ivy-switch-buffer
                               'ivy-rich-switch-buffer-transformer))

#+end_src

** LANGUAGE SUPPORT
Emacs has built-in programming language modes for Lisp, Scheme, DSSSL, Ada, ASM, AWK, C, C++, Fortran, Icon, IDL (CORBA), IDLWAVE, Java, Javascript, M4, Makefiles, Metafont, Modula2, Object Pascal, Objective-C, Octave, Pascal, Perl, Pike, PostScript, Prolog, Python, Ruby, Simula, SQL, Tcl, Verilog, and VHDL.  Other languages will require you to install additional modes.

#+begin_src emacs-lisp
(use-package haskell-mode)
(use-package lua-mode)
(use-package php-mode)
(use-package yaml-mode
  :commands yaml-mode)


#+end_src

** Vim Bindings Everywhere else
#+BEGIN_SRC emacs-lisp
(use-package evil-collection
  :after evil
  :config
  (setq evil-want-integration t)
  (evil-collection-init))
  #+END_SRC
** set new theme
#+BEGIN_SRC emacs-lisp
 
(use-package gruvbox-theme
 :config
 (load-theme 'gruvbox t))
 #+END_src

** enable vertico mode to show sugestions
#+BEGIN_SRC emacs-lisp

(use-package vertico
  :config
  (vertico-mode))
#+END_src

** enable org modern
#+BEGIN_SRC emacs-lisp
;; Option 1: Per buffer
;;(add-hook 'org-mode-hook #'org-modern-mode)
;;(add-hook 'org-agenda-finalize-hook #'org-modern-agenda)

;; Option 2: Globally
;;(with-eval-after-load 'org (global-org-modern-mode))

#+END_SRC
** HIGHLIGHT TODO
Adding highlights to TODO and related words.

#+begin_src emacs-lisp
(use-package hl-todo
  :hook ((org-mode . hl-todo-mode)
         (prog-mode . hl-todo-mode))
  :config
  (setq hl-todo-highlight-punctuation ":"
        hl-todo-keyword-faces
        `(("TODO"       warning bold)
          ("FIXME"      error bold)
          ("HACK"       font-lock-constant-face bold)
          ("REVIEW"     font-lock-keyword-face bold)
          ("NOTE"       success bold)
          ("DEPRECATED" font-lock-doc-face bold))))

#+end_src

** install which-key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 0.3))
 #+END_SRC
** corfu auto complete
#+BEGIN_SRC emacs-lisp
(use-package corfu)

(global-corfu-mode)

(setq completion-cycle-threshold 3)
(setq read-extended-command-predicate #'command-completion-default-include-p)
(setq corfu-auto t)
(setq corfu-quit-no-match 'separator)
#+END_SRC
** install colorful-mode
#+BEGIN_SRC emacs-lisp
 (use-package colorful-mode
  :ensure t ; Optional
  :hook (prog-mode text-mode)
  ...)

#+END_SRC
** babel language
#+BEGIN_SRC emacs-lisp
;; active Babel languages
(org-babel-do-load-languages
'org-babel-load-languages
'((shell . t)))
#+END_SRC
** Htmlize
Needed for syntax highlighting in HTML exports.
#+BEGIN_SRC emacs-lisp
(use-package htmlize)
#+END_SRC
** Download
Support for dragging and dropping images and pasting from the clipboard into an org document (via org-download-clipboard).
#+BEGIN_SRC emacs-lisp
(use-package org-download)
#+END_SRC
** org bullets
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook 'org-indent-mode)
(use-package org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+END_SRC
** nerd-icons
#+BEGIN_SRC emacs-lisp
(use-package nerd-icons
  ;; :custom
  ;; The Nerd Font you want to use in GUI
  ;; "Symbols Nerd Font Mono" is the default and is recommended
  ;; but you can use any other Nerd Font if you want
  ;; (nerd-icons-font-family "Symbols Nerd Font Mono")
  )
  #+END_SRC
** doom-modeline
#+begin_src emacs-lisp
;; make sure to run {package-refresh-contents} in emacs to update packges.
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1))
  #+END_SRC
** all-the-icons
#+BEGIN_SRC emacs-lisp
(use-package all-the-icons
  :if (display-graphic-p))
#+END_SRC
** NEOTREE
Neotree is a file tree viewer.  When you open neotree, it jumps to the current file thanks to neo-smart-open.  The neo-window-fixed-size setting makes the neotree width be adjustable.  NeoTree provides following themes: classic, ascii, arrow, icons, and nerd.  Theme can be config'd by setting "two" themes for neo-theme: one for the GUI and one for the terminal.  I like to use 'SPC t' for 'toggle' keybindings, so I have used 'SPC t n' for toggle-neotree.

| COMMAND        | DESCRIPTION               | KEYBINDING |
|----------------+---------------------------+------------|
| neotree-toggle | /Toggle neotree/            | SPC t n    |
| neotree- dir   | /Open directory in neotree/ | SPC d n    |

#+BEGIN_SRC emacs-lisp
(use-package neotree
  :config
  (setq neo-smart-open t
        neo-show-hidden-files t
        neo-window-width 55
        neo-window-fixed-size nil
        inhibit-compacting-font-caches t
        projectile-switch-project-action 'neotree-projectile-action) 
        ;; truncate long file names in neotree
        (add-hook 'neo-after-create-hook
           #'(lambda (_)
               (with-current-buffer (get-buffer neo-buffer-name)
                 (setq truncate-lines t)
                 (setq word-wrap nil)
                 (make-local-variable 'auto-hscroll-mode)
                 (setq auto-hscroll-mode nil)))))

#+end_src

** Olivetti
A configurable minor mode that automatically centers the content and balances window margins, with adjustable workspace width.

It's particularly useful for writers, as it solves the problem of 'floating' text.

Read more: https://github.com/rnkn/olivetti
#+BEGIN_SRC emacs-lisp
(use-package olivetti
  :ensure t)
  #+END_SRC
  
** Sudo-Edit
This package allows you to edit files as a root user. For example, quick modification /etc/resolv.conf

Read more: https://melpa.org/#/sudo-edit
#+BEGIN_SRC emacs-lisp
(use-package sudo-edit
  :ensure t
  :bind (("C-x x f" . sudo-edit-find-file)
	 ("C-x x e" . sudo-edit)))
  #+END_SRC
